import logging
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import sqlite3
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

TOKEN = "7810631158:AAFZnfH_Y1Bfai_pJ-SyWshFwyKZICf-w18"
WEB_APP_URL = "https://ttpabwa19.github.io/Bars/"  # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ
conn = sqlite3.connect('users.db')
cursor = conn.cursor()
cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        coins INTEGER DEFAULT 0
    )
''')
conn.commit()

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# /start
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    user_id = message.from_user.id
    cursor.execute("INSERT OR IGNORE INTO users (user_id) VALUES (?)", (user_id,))
    conn.commit()

    await message.answer(
        "üéÆ BarsIQ - –º–∏–Ω–∏-–∏–≥—Ä–∞ –¥–ª—è –ø—Ä–æ–∫–∞—á–∫–∏ –º–æ–∑–≥–∞!\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:",
        reply_markup=InlineKeyboardMarkup().add(
            InlineKeyboardButton("üß† –ò–≥—Ä–∞—Ç—å –≤ BarsIQ", web_app=types.WebAppInfo(url=WEB_APP_URL))
        )
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ web_app_data
@dp.message_handler(content_types=['web_app_data'])
async def web_app_data_handler(message: types.Message):
    user_id = message.from_user.id
    try:
        data = json.loads(message.web_app_data.data)

        if data.get("action") == "click":
            coins = int(data.get("coins", 0))
            cursor.execute("UPDATE users SET coins = ? WHERE user_id = ?", (coins, user_id))
            conn.commit()
            await message.answer(f"‚úÖ –ú–æ–Ω–µ—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {coins} üí∞")

        elif data.get("action") == "get_leaderboard":
            cursor.execute("SELECT user_id, coins FROM users ORDER BY coins DESC LIMIT 100")
            top_users = cursor.fetchall()

            leaderboard = [{"user_id": uid, "coins": c} for uid, c in top_users]
            await message.answer_web_app(json.dumps({"leaderboard": leaderboard}))

    except Exception as e:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö!")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ web_app_data: {e}")

if __name__ == '__main__':
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    executor.start_polling(dp)







